[{"D:\\notes-app\\notes-app\\src\\index.tsx":"1","D:\\notes-app\\notes-app\\src\\reportWebVitals.ts":"2","D:\\notes-app\\notes-app\\src\\App.tsx":"3"},{"size":554,"mtime":1696758497032,"results":"4","hashOfConfig":"5"},{"size":425,"mtime":1696758496870,"results":"6","hashOfConfig":"5"},{"size":4076,"mtime":1696775159742,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","suppressedMessages":"10","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"uf0lf6",{"filePath":"11","messages":"12","suppressedMessages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17"},"D:\\notes-app\\notes-app\\src\\index.tsx",[],[],"D:\\notes-app\\notes-app\\src\\reportWebVitals.ts",[],[],"D:\\notes-app\\notes-app\\src\\App.tsx",["18"],[],"import \"./App.css\";\n\nimport React, { useState, useEffect } from 'react';\n\n\ntype Note = {\n  id: number;\n  title: string;\n  content: string;\n}\n\nconst App = () => {\n  const [notes, setNotes] = useState<Note[]>([]);\n\n  const [title, setTitle] = useState(\"\");\n  const [content, setContent] = useState(\"\");\n\n  const [selectedNote, setSelectedNote] = useState<Note | null>(null);\n\n  useEffect(() => {\n    const fetchNotes = async () => {\n      try {\n        const response = await fetch(\"http://localhost:5000/api/notes\");\n\n        const notes: Note[] = await response.json();\n\n        setNotes(notes);\n      } catch (e) {\n        console.log(e);\n      }\n    };\n\n    fetchNotes();\n  }, []);\n\n  const handleNoteClick = (note: Note) => {\n    setSelectedNote(note);\n    setTitle(note.title);\n    setContent(note.content);\n  };\n\n  const handleAddNote = async (\n    event: React.FormEvent\n  ) => {\n    event.preventDefault();\n    try {\n      const response = await fetch(\n        \"http://localhost:5000/api/notes\",\n        {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({\n            title,\n            content,\n          }),\n        }\n      );\n\n      const newNote = await response.json();\n\n      setNotes([newNote, ...notes]);\n      setTitle(\"\");\n      setContent(\"\");\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n\n  const handleUpdateNote = async (\n    event: React.FormEvent\n  ) => {\n    event.preventDefault();\n\n    if (!selectedNote) {\n      return;\n    }\n\n    try {\n      const response = await fetch(\n        `http://localhost:5000/api/notes/${selectedNote.id}`,\n        {\n          method: \"PUT\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({\n            title,\n            content,\n          }),\n        }\n      );\n\n      const updatedNote = await response.json();\n\n      const updatedNotesList = notes.map((note) =>\n        note.id === selectedNote.id\n          ? updatedNote\n          : note\n      );\n\n      setNotes(updatedNotesList);\n      setTitle(\"\");\n      setContent(\"\");\n      setSelectedNote(null);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n\n  const handleCancel = () => {\n    setTitle(\"\");\n    setContent(\"\");\n    setSelectedNote(null);\n  };\n\n  const deleteNote = async (\n    event: React.MouseEvent,\n    noteId: number\n  ) => {\n    event.stopPropagation();\n\n    try {\n      await fetch(\n        `http://localhost:5000/api/notes/${noteId}`,\n        {\n          method: \"DELETE\",\n        }\n      );\n      const updatedNotes = notes.filter(\n        (note) => note.id !== noteId\n      );\n\n      setNotes(updatedNotes);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n    \n  return (\n    <div className=\"app-container\">\n      <form className=\"note-form\" onSubmit={(event) => handleAddNote(event)}>\n      <input\n        value={title}\n        onChange={(event) => setTitle(event.target.value)}\n        placeholder=\"Title\"\n        required\n      ></input>\n\n      <textarea\n        value={content}\n        onChange={(event) => setContent(event.target.value)}\n        placeholder=\"Content\"\n        rows={10}\n        required\n      ></textarea>\n\n      {selectedNote ? (\n        <div className=\"edit-buttons\">\n        <button type=\"submit\">Save</button>\n        <button onClick={handleCancel}>Cancel</button>\n        </div>\n      ) : (\n        <button type=\"submit\">Add Note</button>\n      )}\n      </form>\n      \n      <div className=\"notes-grid\">\n  {notes.map((note) => (\n    <div className=\"note-item\" onClick={() => handleNoteClick(note)}>\n      <div className=\"notes-header\">\n        <button onClick={(event) => deleteNote(event, note.id)}>x</button>\n      </div>\n      <h2>{note.title}</h2>\n      <p>{note.content}</p>\n    </div>\n  ))}\n\n        <div className=\"note-item\">\n          <div className=\"notes-header\">\n            <button>X</button>\n          </div>\n          <h2>Note Title</h2>\n          <p>Note Content</p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;",{"ruleId":"19","severity":1,"message":"20","line":72,"column":9,"nodeType":"21","messageId":"22","endLine":72,"endColumn":25},"@typescript-eslint/no-unused-vars","'handleUpdateNote' is assigned a value but never used.","Identifier","unusedVar"]